{
  "swagger": "2.0",
  "info": {
    "title": "BeezUP gateway API",
    "description": "\r\n# The REST API of BeezUP system - Adapter\r\n## Overview\r\nThe REST APIs provide programmatic access to read and write BeezUP data. \r\n\r\nThis API have to be implemented by the marketplaces to be able to receive/send data from BeezUP.\r\n\r\n\r\nThe main features are:\r\n- Receive merchant feeds (products and offers)\r\n- Fetch merchant orders\r\n- Receive merchant order changes\r\n- ...\r\n\r\n\r\n## Things to keep in mind\r\n### Media type\r\nThe default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.\r\n\r\n### Required content type\r\nThe required and default encoding for the request and responses is UTF8.\r\n\r\n### Required date time format\r\nAll our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.\r\n\r\n### Base URL\r\nAll URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.\r\n\r\nYou can test our API on https://beezup.github.io/mkp-adpt-api-docs/swagger-ui\\\\\r\nYou can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)\r\n\r\n",
    "version": "2.0",
    "x-logo": {
      "url": "https://avatars0.githubusercontent.com/u/25665430",
      "backgroundColor": "#FFFFFF"
    },
    "contact": {
      "email": "help@beezup.com"
    },
    "license": {
      "name": "BeezUP",
      "url": "http://www.beezup.com"
    }
  },
  "host": "mkpapigateway.beezup.com",
  "x-beezup-ops": {
    "codeGenType": "webapi",
    "repo": "BeezUP",
    "product": "BeezUP",
    "group": "adpt-feedpub",
    "applicationShortName": "MKP.ADPT.Feeds.WS",
    "appRoot": "BZ.MKP.ADPT.Feeds.WebService",
    "namespace": "BZ.MKP.ADPT.Feeds.WebService",
    "apiName": "MkpGatewayFeedsV1",
    "useBeezUPFrameworkVersion2": true,
    "comment": "First document\n",
    "using": [
      "BeezUP2.Framework.Messaging",
      "BeezUP2.MKP.Gateway.Schemas",
      "BeezUP2.MKP.Feeds.Schemas",
      "BeezUP2.MKP.Feeds.Messages"
    ],
    "references": [
      "BeezUP2.MKP.Feeds.Messages"
    ],
    "packages": [
      "BeezUPWebApi"
    ]
  },
  "x-basePath": "/marketplace/feeds/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Marketplace Gateway API - Feeds - Publication",
      "x-displayName": "Publication"
    },
    {
      "name": "Marketplace Gateway API - Orders - Order Management",
      "x-displayName": "Order Management"
    }
  ],
  "responses": {
    "404_Publication_NotFound": {
      "description": "The combination of MarketplaceBusinessCode, AccountId and publication id is not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "400_MBC_Invalid": {
      "description": "The marketplace business code is invalid is invalid",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "409_Publication_Already_Completed": {
      "description": "The publication id is already completed",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "409_Publication_Already_Exists": {
      "description": "The publication id  already exists",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "404_OrderChangeId_Not_Found": {
      "description": "Order change not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "404_Order_Not_Found": {
      "description": "Order not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "GeneralError": {
      "description": "Occurs when something goes wrong",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "304_NotModified": {
      "description": "The ETag sent in the http header If-None-Match did not change. So you are up to date !",
      "headers": {
        "Last-Modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification UTC date of the resource\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
        },
        "ETag": {
          "type": "string",
          "description": "ETag value to identify the current version of the resource\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    },
    "200_HealthCheck": {
      "description": "The health check of the API",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/healthCheck"
        }
      }
    },
    "503_Marketplace_Down": {
      "description": "The marketplace has an invalid response",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "400_MBC_Or_Request_Invalid": {
      "description": "The marketplace business code is invalid or the request is invalid",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "409_Not_Yet_Available": {
      "description": "Resource not yet available",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "404_BeezUP_TraceId_NotFound": {
      "description": "BeezUP Trace Id is not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    }
  },
  "parameters": {
    "publicationIdParameter": {
      "name": "publicationId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid"
    },
    "paginationContinuationTokenQueryStringParameter": {
      "name": "paginationContinuationToken",
      "description": "The pagination continuation token you want to get next page.",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "PaginationContinuationToken"
    },
    "orderChangeIdParameter": {
      "name": "orderChangeId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid"
    },
    "marketplaceOrderIdParameter": {
      "name": "marketplaceOrderId",
      "description": "The marketplace order identifier",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "MarketplaceOrderId",
      "x-example": "M1234X10"
    },
    "beezUPRequestIdHeaderParameter": {
      "name": "x-BeezUP-RequestId",
      "in": "header",
      "type": "string",
      "format": "Guid",
      "required": true,
      "description": "Indicates to the server the BeezUP request id related to this call. All traces must use this id to be able to follow it."
    },
    "beezUPCorrelationIdHeaderParameter": {
      "name": "x-BeezUP-CorrelationId",
      "in": "header",
      "type": "string",
      "format": "Guid",
      "required": true,
      "description": "Indicates to the server the BeezUP correlation id related to this call. All traces must use this id to be able to follow it."
    },
    "marketplaceBusinessCodeParameter": {
      "name": "marketplaceBusinessCode",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "accountIdParameter": {
      "name": "accountId",
      "in": "path",
      "required": true,
      "type": "integer"
    },
    "credentialParameter": {
      "name": "x-BeezUP-Credential",
      "in": "header",
      "required": true,
      "type": "string",
      "description": "It's the merchant configuration related to the marketplace, serialiazed in json in base64."
    },
    "pageNumberQueryStringParameter": {
      "name": "pageNumber",
      "description": "The page number you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "x-minimum": 1,
      "x-example": 1
    },
    "pageSizeQueryStringParameter": {
      "name": "pageSize",
      "description": "The entry count you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 25,
      "x-minimum": 25,
      "x-example": 25
    },
    "acceptEncodingRequiredParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": true,
      "type": "string"
    },
    "ifNoneMatchRequiredParameter": {
      "name": "If-None-Match",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\\nIf the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "contentEncodingRequiredParameter": {
      "name": "Content-Encoding",
      "description": "The content of the body is compressed to reduce traffic size.",
      "in": "header",
      "required": true,
      "type": "string",
      "x-example": "gzip"
    }
  },
  "paths": {
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/health": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Get the Health check of your feed system",
        "operationId": "HealthCheckGatewayFeedApi",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_HealthCheck"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/start": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Start the feed publication",
        "operationId": "StartFeedPublication",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/startFeedPublicationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The feed publication has been started!"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Exists"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/messages": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Push a batch of feed messages",
        "operationId": "PushMerchantFeedMessages",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/contentEncodingRequiredParameter"
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/pushFeedMessagesRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The feed messages have been registered!"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Completed"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/complete": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Complete the feed publication",
        "operationId": "CompleteFeedPublication",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/completeFeedPublicationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The feed comands has been completed!"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Completed"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/status": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "x-tagGroups": "Publication",
        "operationId": "CheckPublicationStatus",
        "summary": "Check the publication status",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Publication status retrieved",
            "schema": {
              "$ref": "#/definitions/checkFeedPublicationStatusResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Not_Yet_Available"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/reporting": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "x-tagGroups": "Publication",
        "operationId": "GetPublicationReporting",
        "summary": "Get the publication reporting",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/acceptEncodingRequiredParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The error reporting is retrieved",
            "headers": {
              "Content-Encoding": {
                "description": "The response is compressed to reduce traffic.",
                "type": "string",
                "x-example": "gzip"
              }
            },
            "schema": {
              "$ref": "#/definitions/getFeedPublicationReportingResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Not_Yet_Available"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/exchangedMessages/{beezUPCorrelationId}": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "x-tagGroups": "Publication",
        "operationId": "GetPublicationExchangedMessages",
        "summary": "Get the publication exchanged messages with the marketplace",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "name": "beezUPCorrelationId",
            "in": "path",
            "type": "string",
            "required": true,
            "format": "CorrelationId"
          }
        ],
        "responses": {
          "200": {
            "description": "The exchanged messages are retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/exchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_BeezUP_TraceId_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Not_Yet_Available"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/health": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "summary": "Health check the order management system",
        "operationId": "HealthCheckGatewayOrderApi",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_HealthCheck"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "503": {
            "description": "The status of your API is down..."
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/list": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "summary": "Get order list",
        "description": "RECOMMANDATION: We recommend to always use the orderMarketplaceLastModificationUtcDate to get from the marketplace and sort the response to BeezUP.\n",
        "operationId": "GetOrderList",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/acceptEncodingRequiredParameter"
          },
          {
            "$ref": "#/parameters/pageSizeQueryStringParameter"
          },
          {
            "$ref": "#/parameters/paginationContinuationTokenQueryStringParameter"
          },
          {
            "name": "orderMarketplaceModificationBeginUtcDate",
            "description": "The marketplace modification begin utc date already received by BeezUP. \nBeezUP expects that all orders modification date are more recent than this date.\nRECOMMANDATION: If the marketplace allows the filter with modification date, we recommend you to use this filter in priority instead of the purchase date to avoid useless pooling with the marketplace.\n",
            "required": true,
            "in": "query",
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          },
          {
            "name": "orderMarketplaceModificationEndUtcDate",
            "description": "The marketplace modification end utc date. \nBeezUP expects that all orders modification date are older than this date.\nRECOMMANDATION: If the marketplace allows the filter with modification date, we recommend you to use this filter in priority instead of the purchase date to avoid useless pooling with the marketplace.\n",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          },
          {
            "name": "orderPurchaseBeginUtcDate",
            "description": "The order purchase begin UTC date already received by BeezUP.\nBeezUP expects that all orders are more recent than this date.\nRECOMMANDATION: We send this information in case where the marketplace does not have any order last modification date.\nIf the marketplace allows the filter with modification date than use the modification date filter instead the purchase date filter.\n",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          },
          {
            "name": "orderLastPurchaseEndUtcDate",
            "description": "The order purchase end UTC date already received by BeezUP.\nBeezUP expects that all orders are older than this date.\nRECOMMANDATION: We send this information in case where the marketplace does not have any order last modification date.\nIf the marketplace allows the filter with modification date than use the modification date filter instead the purchase date filter.\n",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          }
        ],
        "responses": {
          "200": {
            "description": "The order list is retrieved",
            "headers": {
              "Content-Encoding": {
                "description": "The response is zipped to reduce traffic.",
                "type": "string",
                "x-example": "gzip"
              }
            },
            "schema": {
              "$ref": "#/definitions/getOrderListResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/{marketplaceOrderId}": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "summary": "Get order",
        "operationId": "GetOrder",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchRequiredParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The order is retrieved",
            "schema": {
              "$ref": "#/definitions/getOrderResponse"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Order_Not_Found"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/{marketplaceOrderId}/changes/{orderChangeId}/message": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "summary": "Push an  order change message",
        "operationId": "PushOrderChangeMessage",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/orderChangeIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/pushOrderChangeMessageRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The order change message have been accepted, please check the order change status response."
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/{marketplaceOrderId}/changes/{orderChangeId}/status": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "x-tagGroups": "Order Management",
        "operationId": "CheckOrderChangeStatus",
        "summary": "Check the order change status",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/orderChangeIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Order change status retrieved",
            "schema": {
              "$ref": "#/definitions/orderChangeStatusResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_OrderChangeId_Not_Found"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/exchangedMessages/{beezUPCorrelationId}": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "x-tagGroups": "Order Management",
        "operationId": "GetOrderExchangedMessages",
        "summary": "Get the order exchanged messages with the marketplace",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "name": "beezUPCorrelationId",
            "in": "path",
            "type": "string",
            "required": true,
            "format": "CorrelationId"
          }
        ],
        "responses": {
          "200": {
            "description": "The exchanged messages are retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/exchangedMessages"
              }
            }
          },
          "404": {
            "$ref": "#/responses/404_BeezUP_TraceId_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Not_Yet_Available"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    }
  },
  "definitions": {
    "paginationContinuationToken": {
      "type": "string",
      "description": "Just a string value that will help to get the next page"
    },
    "getOrderListResponse": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "nextPageContinuationToken": {
          "$ref": "#/definitions/paginationContinuationToken"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrder"
          }
        }
      }
    },
    "getOrderResponse": {
      "$ref": "#/definitions/marketplaceOrder"
    },
    "pushOrderChangeMessageRequest": {
      "type": "object",
      "required": [
        "beezUPOrderChangeType",
        "marketplaceOrderItems"
      ],
      "properties": {
        "beezUPOrderChangeType": {
          "$ref": "#/definitions/beezUPOrderChangeType"
        },
        "parameters": {
          "$ref": "#/definitions/orderChangeParameters"
        },
        "marketplaceOrderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrderItem"
          }
        }
      }
    },
    "orderChangeStatusResponse": {
      "type": "object",
      "required": [
        "beezUPOrderChangeStatus"
      ],
      "properties": {
        "marketplaceOrderChangeStatus": {
          "$ref": "#/definitions/marketplaceOrderChangeStatus"
        },
        "beezUPOrderChangeStatus": {
          "$ref": "#/definitions/beezUPOrderChangeStatus"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "marketplaceOrder": {
      "type": "object",
      "required": [
        "marketplaceOrderId",
        "orderPurchaseUtcDate",
        "marketplaceOrderStatus",
        "marketplaceOrderLastModificationUtcDate",
        "marketplaceOrderETag",
        "properties",
        "items"
      ],
      "properties": {
        "marketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        },
        "orderPurchaseUtcDate": {
          "$ref": "#/definitions/orderPurchaseUtcDate"
        },
        "marketplaceOrderStatus": {
          "$ref": "#/definitions/marketplaceOrderStatus"
        },
        "marketplaceOrderLastModificationUtcDate": {
          "$ref": "#/definitions/marketplaceOrderLastModificationUtcDate"
        },
        "marketplaceOrderETag": {
          "$ref": "#/definitions/marketplaceOrderETag"
        },
        "properties": {
          "$ref": "#/definitions/marketplaceOrderProperties"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrderItem"
          }
        }
      }
    },
    "marketplaceOrderId": {
      "description": "The marketplace order identifier",
      "type": "string"
    },
    "orderPurchaseUtcDate": {
      "type": "string",
      "format": "date-time"
    },
    "marketplaceOrderStatus": {
      "type": "string"
    },
    "marketplaceOrderLastModificationUtcDate": {
      "type": "string",
      "format": "date-time"
    },
    "marketplaceOrderETag": {
      "type": "string"
    },
    "marketplaceOrderProperties": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "marketplaceOrderItem": {
      "type": "object",
      "required": [
        "properties"
      ],
      "properties": {
        "marketplaceOrderItemId": {
          "$ref": "#/definitions/marketplaceOrderItemId"
        },
        "properties": {
          "$ref": "#/definitions/marketplaceOrderItemProperties"
        }
      }
    },
    "marketplaceOrderItemId": {
      "type": "string"
    },
    "marketplaceOrderItemProperties": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "beezUPOrderChangeType": {
      "type": "string"
    },
    "orderChangeParameters": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "orderApiOperationName": {
      "type": "string",
      "enum": [
        "HealthCheckGatewayOrderApi",
        "GetOrderList",
        "GetOrder",
        "PushOrderChangeMessage",
        "CheckOrderChangeStatus",
        "GetOrderExchangedMessages"
      ]
    },
    "marketplaceOrderChangeStatus": {
      "type": "string"
    },
    "beezUPOrderChangeStatus": {
      "type": "string",
      "enum": [
        "notStarted",
        "inProgress",
        "success",
        "failed"
      ],
      "default": "notStarted"
    },
    "startFeedPublicationRequest": {
      "type": "object",
      "required": [
        "feedType"
      ],
      "properties": {
        "feedType": {
          "$ref": "#/definitions/feedMessageType"
        }
      }
    },
    "completeFeedPublicationRequest": {
      "type": "object",
      "required": [
        "processingStatus"
      ],
      "properties": {
        "processingStatus": {
          "$ref": "#/definitions/feedPublicationStatus"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorId": {
          "type": "string"
        }
      }
    },
    "pushFeedMessagesRequest": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feedMessage"
          }
        }
      }
    },
    "checkFeedPublicationStatusResponse": {
      "description": "Publication Status Response",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/feedPublicationStatus"
        },
        "globalReportings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportingItem"
          }
        }
      }
    },
    "getFeedPublicationReportingResponse": {
      "description": "Publication Reporting Response",
      "type": "object",
      "properties": {
        "feedReportings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feedReporting"
          }
        }
      }
    },
    "feedType": {
      "type": "string",
      "enum": [
        "products",
        "offers"
      ]
    },
    "feedMessageType": {
      "type": "string",
      "enum": [
        "publish",
        "unpublish"
      ]
    },
    "reportingType": {
      "type": "string",
      "enum": [
        "error",
        "warning"
      ],
      "default": "error"
    },
    "feedPublicationStatus": {
      "type": "string",
      "enum": [
        "notStarted",
        "inProgress",
        "success",
        "failed"
      ],
      "default": "notStarted"
    },
    "feedApiOperationName": {
      "type": "string",
      "enum": [
        "healthCheckGatewayFeedApi",
        "startFeedPublication",
        "pushMerchantFeedMessages",
        "completeFeedPublication",
        "checkPublicationStatus",
        "getPublicationReporting",
        "getPublicationExchangedMessages"
      ],
      "default": "pushMerchantFeedMessages"
    },
    "feedMessage": {
      "type": "object",
      "discriminator": "messageType",
      "properties": {
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "messageType": {
          "$ref": "#/definitions/feedMessageType"
        }
      }
    },
    "feedMetadata": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "The marketplace column name"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "publishFeed": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/feedMessage"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "description": "where key is the marketplace column name",
              "type": "array",
              "items": {
                "$ref": "#/definitions/feedMetadata"
              }
            }
          }
        }
      ]
    },
    "unpublishFeed": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/feedMessage"
        }
      ]
    },
    "reportingItem": {
      "type": "object",
      "required": [
        "reportingType",
        "code",
        "message"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/reportingType"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "feedReporting": {
      "type": "object",
      "required": [
        "sku",
        "reportings"
      ],
      "properties": {
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "reportings": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/reportingItem"
          }
        }
      }
    },
    "errorResponseMessage": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": false,
          "minLength": 1,
          "items": {
            "$ref": "#/definitions/userErrorMessage"
          }
        }
      }
    },
    "docUrl": {
      "type": "string",
      "format": "string",
      "description": "The documentation related to this operation.",
      "example": "https://api-docs.beezup.com/#operation/EnableChannelCatalog"
    },
    "userErrorMessage": {
      "type": "object",
      "x-exclude": true,
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "docUrl": {
          "$ref": "#/definitions/docUrl"
        },
        "code": {
          "type": "string",
          "description": "the error code. The error code can be a pattern containing the argument's name",
          "example": "CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)"
        },
        "message": {
          "type": "string",
          "description": "The error message",
          "example": "There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527\n"
        },
        "cultureName": {
          "type": "string",
          "description": "If the error is translated, the culture name will be indicated",
          "example": "en",
          "x-lov": "Go2CultureName"
        },
        "arguments": {
          "type": "array",
          "description": "a dictionary string/object",
          "items": {
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The key of the parameter",
                "example": "currentCatalogImportationId"
              },
              "value": {
                "type": "object",
                "description": "The value of the parameter. Depending to the type.",
                "example": "b24d0dd8-a561-478a-9b26-34f573f03527"
              }
            }
          }
        }
      }
    },
    "healthCheck": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Health check name",
          "example": "MyDatabaseCheck"
        },
        "message": {
          "type": "string",
          "description": "Gets the status message of the check.",
          "example": "Database connection OK"
        },
        "status": {
          "$ref": "#/definitions/healthCheckStatus"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "healthCheckStatus": {
      "type": "string",
      "description": "Possible status values of a health check result.\n* degraded:  The check is degraded, failing but not critical\n* healthy: The check is healthy\n* ignored: The check was ignored\n* unhealthy:  The check is unhealthy\n",
      "enum": [
        "degraded",
        "healthy",
        "ignored",
        "unhealthy"
      ]
    },
    "sku": {
      "type": "string",
      "description": "The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku",
      "maxLength": 50
    },
    "exchangedMessages": {
      "type": "object",
      "required": [
        "operationName",
        "requestId"
      ],
      "properties": {
        "operationName": {
          "type": "string"
        },
        "requestId": {
          "$ref": "#/definitions/requestId"
        },
        "marketplaceExchangedMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/exchangedMessagesItem"
          }
        }
      }
    },
    "exchangedMessagesItem": {
      "type": "object",
      "required": [
        "marketplaceOperationName",
        "requestUri",
        "responseUri",
        "requestUtcDate",
        "responseUtcDate"
      ],
      "properties": {
        "marketplaceOperationName": {
          "type": "string"
        },
        "requestUri": {
          "type": "string",
          "format": "uri"
        },
        "responseUri": {
          "type": "string",
          "format": "uri"
        },
        "requestUtcDate": {
          "type": "string",
          "format": "date-time"
        },
        "responseUtcDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "correlationId": {
      "type": "string",
      "x-exclude": true,
      "description": "The correlation identifier. It's a guid.",
      "format": "guid"
    },
    "requestId": {
      "type": "string",
      "description": "The request identifier. It's a guid.",
      "format": "guid"
    },
    "httpUrl": {
      "description": "The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>",
      "type": "string",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "x-pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "http://www.mydomain.com"
    }
  },
  "externalDocs": {
    "description": "Find the documentation for BeezUP's API here",
    "url": "https://api-docs.beezup.com/"
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  },
  "x-tagGroups": [
    {
      "name": "Marketplace Gateway API - Feeds",
      "tags": [
        "Marketplace Gateway API - Feeds - Publication"
      ]
    },
    {
      "name": "Marketplace Gateway API - Orders",
      "tags": [
        "Marketplace Gateway API - Orders - Order Management"
      ]
    }
  ]
}