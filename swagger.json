{
  "swagger": "2.0",
  "info": {
    "title": "BeezUP Gateway API ",
    "description": "# The REST API of BeezUP system - Adapter\n## Overview\nThe REST APIs provide programmatic access to read and write BeezUP data. \n\nThis API have to be implemented by the marketplaces to be able to receive/send data from BeezUP.\n\n\nThe main features are:\n- Receive merchant feeds (products and offers)\n- Fetch merchant orders\n- Receive merchant order changes\n- ...\n\n\n## Things to keep in mind\n### Media type\nThe default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.\n\n### Required content type\nThe required and default encoding for the request and responses is UTF8.\n\n### Required date time format\nAll our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.\n\n### Base URL\nAll URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.\n\nYou can test our API on https://beezup.github.io/mkp-adpt-api-docs/swagger-ui\\\\\nYou can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)",
    "version": "1.0",
    "x-logo": {
      "url": "https://avatars0.githubusercontent.com/u/25665430",
      "backgroundColor": "#FFFFFF"
    },
    "contact": {
      "email": "help@beezup.com"
    },
    "license": {
      "name": "BeezUP",
      "url": "https://www.beezup.com/"
    }
  },
  "host": "mkpapigateway.beezup.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Marketplace Gateway API - Platform - Platform",
      "x-displayName": "Platform"
    },
    {
      "name": "Marketplace Gateway API - Feeds - Publication",
      "x-displayName": "Publication"
    },
    {
      "name": "Marketplace Gateway API - Orders - Order Management",
      "x-displayName": "Order Management"
    },
    {
      "name": "Conversation ADPT RestAPI - Conversation",
      "x-displayName": "Conversation"
    }
  ],
  "paths": {
    "/marketplace/platform/v1/{marketplaceBusinessCode}/{accountId}/health": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Platform - Platform"
        ],
        "x-tagGroups": "Platform",
        "summary": "Health check the marketplace system",
        "operationId": "HealthCheckGateway",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_HealthCheck"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/platform/v1/{marketplaceBusinessCode}/{accountId}/exchangedMessages/{beezUPCorrelationId}": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Platform - Platform"
        ],
        "x-tagGroups": "Platform",
        "operationId": "GetExchangedMessages",
        "summary": "Get the exchanged messages with the marketplace",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "name": "beezUPCorrelationId",
            "in": "path",
            "type": "string",
            "required": true,
            "format": "CorrelationId"
          },
          {
            "name": "X-ContinuationToken",
            "in": "header",
            "type": "string",
            "required": false,
            "description": "If the X-ContinuationToken in response is fulfilled, you can have the next page using this parameter",
            "x-base64": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "The exchanged messages are retrieved",
            "headers": {
              "X-NextContinuationToken": {
                "type": "string",
                "description": "If there is more result for this query, the next continuation token will be fulffiled"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/exchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_BeezUP_TraceId_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Not_Yet_Available"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/start": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Start the feed publication",
        "operationId": "StartFeedPublication",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/startFeedPublicationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The feed publication has been started!",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Exists"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/publishFile": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Publish the feeds file",
        "operationId": "PublishFeedsFile",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "feedFileUrl",
            "in": "body",
            "required": true,
            "description": "The uri of the file to process",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The feed messages have been registered!",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Completed"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/publish": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Publish a batch of feeds",
        "operationId": "PublishFeeds",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/contentEncodingRequiredParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publishFeedsRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The feed messages have been registered!",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Completed"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "504": {
            "$ref": "#/responses/504_Gateway_Timeout"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/unpublish": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Unpublish a batch of feeds",
        "operationId": "UnpublishFeeds",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/contentEncodingRequiredParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unpublishFeedsRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The feed messages have been registered!",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Completed"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/unpublishFile": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Unpublish the feeds file",
        "operationId": "UnpublishFeedsFile",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "feedFileUrl",
            "in": "body",
            "required": true,
            "description": "The uri of the file to process",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The feed messages have been registered!",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Completed"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/complete": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "summary": "Complete the feed publication",
        "operationId": "CompleteFeedPublication",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/completeFeedPublicationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The feed comands has been completed!",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Publication_Already_Completed"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/status": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "x-tagGroups": "Publication",
        "operationId": "CheckPublicationStatus",
        "summary": "Check the publication status",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Publication status retrieved",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            },
            "schema": {
              "$ref": "#/definitions/checkFeedPublicationStatusResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Not_Yet_Available"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/feeds/v1/{marketplaceBusinessCode}/{accountId}/publications/{publicationId}/reporting": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Feeds - Publication"
        ],
        "x-tagGroups": "Publication",
        "operationId": "GetPublicationReporting",
        "summary": "Get the publication reporting",
        "parameters": [
          {
            "$ref": "#/parameters/publicationIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/acceptEncodingRequiredParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The error reporting is retrieved",
            "headers": {
              "Content-Encoding": {
                "description": "The response is compressed to reduce traffic.",
                "type": "string",
                "x-example": "gzip"
              }
            },
            "x-MKP-ADPT-ExchangeMessages": {
              "type": "string",
              "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
              "format": "ExchangedMessages"
            },
            "schema": {
              "$ref": "#/definitions/getFeedPublicationReportingResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "401": {
            "$ref": "#/responses/403_Invalid_Merchant_Credentials"
          },
          "404": {
            "$ref": "#/responses/404_Publication_NotFound"
          },
          "409": {
            "$ref": "#/responses/409_Not_Yet_Available"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/list": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "summary": "Get order list",
        "description": "RECOMMANDATION: We recommend to always use the orderMarketplaceLastModificationUtcDate to get from the marketplace and sort the response to BeezUP.\n",
        "operationId": "GetOrderList",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/acceptEncodingRequiredParameter"
          },
          {
            "$ref": "#/parameters/paginationContinuationTokenQueryStringParameter"
          },
          {
            "name": "orderMarketplaceModificationBeginUtcDate",
            "description": "The marketplace modification begin utc date already received by BeezUP. \nBeezUP expects that all orders modification date are more recent than this date.\nRECOMMANDATION: If the marketplace allows the filter with modification date, we recommend you to use this filter in priority instead of the purchase date to avoid useless pooling with the marketplace.\n",
            "required": true,
            "in": "query",
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          },
          {
            "name": "orderMarketplaceModificationEndUtcDate",
            "description": "The marketplace modification end utc date. \nBeezUP expects that all orders modification date are older than this date.\nRECOMMANDATION: If the marketplace allows the filter with modification date, we recommend you to use this filter in priority instead of the purchase date to avoid useless pooling with the marketplace.\n",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          },
          {
            "name": "orderPurchaseBeginUtcDate",
            "description": "The order purchase begin UTC date already received by BeezUP.\nBeezUP expects that all orders are more recent than this date.\nRECOMMANDATION: We send this information in case where the marketplace does not have any order last modification date.\nIf the marketplace allows the filter with modification date than use the modification date filter instead the purchase date filter.\n",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          },
          {
            "name": "orderLastPurchaseEndUtcDate",
            "description": "The order purchase end UTC date already received by BeezUP.\nBeezUP expects that all orders are older than this date.\nRECOMMANDATION: We send this information in case where the marketplace does not have any order last modification date.\nIf the marketplace allows the filter with modification date than use the modification date filter instead the purchase date filter.\n",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-06-24T23:03:12.123Z"
          }
        ],
        "responses": {
          "200": {
            "description": "The order list is retrieved",
            "headers": {
              "Content-Encoding": {
                "description": "The response is zipped to reduce traffic.",
                "type": "string",
                "x-example": "gzip"
              },
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            },
            "schema": {
              "$ref": "#/definitions/getOrderListResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/{marketplaceOrderId}": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "summary": "Get order",
        "operationId": "GetOrder",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchRequiredParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The order is retrieved",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            },
            "schema": {
              "$ref": "#/definitions/getOrderResponse"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Order_Not_Found"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/{marketplaceOrderId}/changes/{orderChangeId}/message": {
      "post": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "summary": "Push an  order change message",
        "operationId": "PushOrderChangeMessage",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/orderChangeIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/pushOrderChangeMessageRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The order change message have been accepted, please check the order change status response.",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Or_Request_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_Order_Not_Found"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceBusinessCode}/{accountId}/{marketplaceOrderId}/changes/{orderChangeId}/status": {
      "get": {
        "tags": [
          "Marketplace Gateway API - Orders - Order Management"
        ],
        "x-tagGroups": "Order Management",
        "operationId": "CheckOrderChangeStatus",
        "summary": "Check the order change status",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceBusinessCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/orderChangeIdParameter"
          },
          {
            "$ref": "#/parameters/credentialParameter"
          },
          {
            "$ref": "#/parameters/beezUPRequestIdHeaderParameter"
          },
          {
            "$ref": "#/parameters/beezUPCorrelationIdHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Order change status retrieved",
            "headers": {
              "x-MKP-ADPT-ExchangeMessages": {
                "type": "string",
                "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
                "format": "ExchangedMessages"
              }
            },
            "schema": {
              "$ref": "#/definitions/orderChangeStatusResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400_MBC_Invalid"
          },
          "404": {
            "$ref": "#/responses/404_OrderChangeId_Not_Found"
          },
          "503": {
            "$ref": "#/responses/503_Marketplace_Down"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/subscribe": {
      "post": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Subscribe to discussions",
        "operationId": "SubscribeDiscussions",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelConfigHeaderParameter"
          },
          {
            "$ref": "#/parameters/channelAccountConfigHeaderParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Subscription accepted"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/unsubscribe": {
      "post": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Unsubscribe to discussions",
        "operationId": "UnsubscribeDiscussions",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Unsubscription accepted"
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/harvest": {
      "post": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Harvest discussions for an account",
        "operationId": "HarvestAccountDiscussions",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelConfigHeaderParameter"
          },
          {
            "$ref": "#/parameters/channelAccountConfigHeaderParameter"
          },
          {
            "name": "since",
            "in": "query",
            "type": "string",
            "format": "date-time",
            "required": false,
            "description": "If used it will force the harvest since this date"
          },
          {
            "name": "force",
            "in": "query",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "202": {
            "description": "Harvest request accepted"
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/harvest/{channelDiscussionId}": {
      "post": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Harvest one discussion",
        "operationId": "HarvestOneDiscussion",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelDiscussionIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelConfigHeaderParameter"
          },
          {
            "$ref": "#/parameters/channelAccountConfigHeaderParameter"
          },
          {
            "name": "force",
            "in": "query",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "202": {
            "description": "Harvest request accepted"
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/discussions": {
      "get": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Get discussions",
        "operationId": "GetDiscussions",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelConfigHeaderParameter"
          },
          {
            "$ref": "#/parameters/channelAccountConfigHeaderParameter"
          },
          {
            "name": "X-PageContinuationToken",
            "in": "header",
            "required": false,
            "type": "string",
            "format": "PageContinuationToken"
          },
          {
            "name": "lastSynchronizationUtcDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lastSynchronizedChannelDiscussionId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "ChannelDiscussionId"
          }
        ],
        "responses": {
          "200": {
            "description": "The discussion list",
            "headers": {
              "X-NextPageContinuationToken": {
                "type": "string",
                "format": "PageContinuationToken"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/getDiscussionResponse"
              }
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/discussions/{channelDiscussionId}": {
      "get": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Get one discussion",
        "operationId": "GetDiscussionMessages",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelDiscussionIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelConfigHeaderParameter"
          },
          {
            "$ref": "#/parameters/channelAccountConfigHeaderParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The discussion message list",
            "schema": {
              "$ref": "#/definitions/getDiscussionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "404": {
            "$ref": "#/responses/GeneralError"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/sendMessages": {
      "post": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Send discussion messages on the channel",
        "operationId": "SendDiscussionMessages",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelConfigHeaderParameter"
          },
          {
            "$ref": "#/parameters/channelAccountConfigHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/sendDiscussionMessageRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The discussion messages sent",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/createDiscussionMessageResponse"
              }
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/{conversationChannelCode}/{merchantId}/createDiscussions": {
      "post": {
        "x-release": "PLANNED",
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "Create discussions on the channel",
        "operationId": "CreateDiscussions",
        "parameters": [
          {
            "$ref": "#/parameters/conversationChannelCodePathParameter"
          },
          {
            "$ref": "#/parameters/merchantIdPathParameter"
          },
          {
            "$ref": "#/parameters/channelConfigHeaderParameter"
          },
          {
            "$ref": "#/parameters/channelAccountConfigHeaderParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/createDiscussionRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Discussions created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/createDiscussionResponse"
              }
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/gateway/conversations/v1/lastSynchronizations": {
      "get": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "GetAllLastSynchronization",
        "operationId": "GetAllLastSynchronization",
        "responses": {
          "200": {
            "description": "Last synchronization information list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountLastSynchronization"
              }
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      },
      "post": {
        "x-basePathSlashOnly": "true",
        "tags": [
          "Conversation ADPT RestAPI - Conversation"
        ],
        "summary": "GetAccountsLastSynchronization",
        "operationId": "GetAccountsLastSynchronization",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/channelCodeMerchantId"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Last synchronization information list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountLastSynchronization"
              }
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    }
  },
  "definitions": {
    "exchangedMessages": {
      "type": "object",
      "required": [
        "operationName",
        "requestId"
      ],
      "properties": {
        "operationName": {
          "type": "string"
        },
        "requestId": {
          "$ref": "#/definitions/requestId"
        },
        "marketplaceExchangedMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/exchangedMessagesItem"
          }
        }
      }
    },
    "healthCheckDomain": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/healthCheckDomainName"
        },
        "message": {
          "type": "string",
          "description": "Gets the status message of the check.",
          "example": "Database connection OK"
        },
        "status": {
          "$ref": "#/definitions/healthCheckStatus"
        },
        "healthChecks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/healthCheck"
          }
        }
      }
    },
    "errorResponseMessage": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": false,
          "minLength": 1,
          "items": {
            "$ref": "#/definitions/userErrorMessage"
          }
        }
      }
    },
    "requestId": {
      "type": "string",
      "description": "The request identifier. It's a guid.",
      "format": "guid"
    },
    "exchangedMessagesItem": {
      "type": "object",
      "required": [
        "marketplaceOperationName",
        "requestUri",
        "requestUtcDate"
      ],
      "properties": {
        "marketplaceOperationName": {
          "type": "string"
        },
        "requestUri": {
          "type": "string",
          "format": "uri"
        },
        "responseUri": {
          "type": "string",
          "format": "uri"
        },
        "requestUtcDate": {
          "type": "string",
          "format": "date-time"
        },
        "responseUtcDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "healthCheckDomainName": {
      "type": "string",
      "description": "Health check domain name",
      "example": "feeds",
      "enum": [
        "feeds",
        "orders"
      ]
    },
    "healthCheckStatus": {
      "type": "string",
      "description": "Possible status values of a health check result.\n* degraded:  The check is degraded, failing but not critical\n* healthy: The check is healthy\n* ignored: The check was ignored\n* unhealthy:  The check is unhealthy\n",
      "enum": [
        "degraded",
        "healthy",
        "ignored",
        "unhealthy"
      ]
    },
    "healthCheck": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Health check domain name",
          "example": "My Storage Name"
        },
        "message": {
          "type": "string",
          "description": "Gets the status message of the check.",
          "example": "Database connection OK"
        },
        "status": {
          "$ref": "#/definitions/healthCheckStatus"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "userErrorMessage": {
      "type": "object",
      "x-exclude": true,
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "docUrl": {
          "$ref": "#/definitions/docUrl"
        },
        "code": {
          "type": "string",
          "description": "the error code. The error code can be a pattern containing the argument's name",
          "example": "CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)"
        },
        "message": {
          "type": "string",
          "description": "The error message",
          "example": "There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527\n"
        },
        "cultureName": {
          "type": "string",
          "description": "If the error is translated, the culture name will be indicated",
          "example": "en",
          "x-lov": "Go2CultureName"
        },
        "arguments": {
          "type": "array",
          "x-exclude": true,
          "description": "a dictionary string/object",
          "items": {
            "$ref": "#/definitions/userErrorMessageArgument"
          }
        }
      }
    },
    "docUrl": {
      "x-exclude": true,
      "type": "string",
      "format": "string",
      "description": "The documentation related to this operation.",
      "example": "https://api-docs.beezup.com/#operation/EnableChannelCatalog"
    },
    "userErrorMessageArgument": {
      "type": "object",
      "x-exclude": true,
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The key of the parameter",
          "example": "currentCatalogImportationId"
        },
        "value": {
          "type": "object",
          "description": "The value of the parameter. Depending to the type."
        }
      }
    },
    "startFeedPublicationRequest": {
      "x-format": "Message",
      "type": "object",
      "required": [
        "feedType"
      ],
      "properties": {
        "feedType": {
          "$ref": "#/definitions/feedType"
        }
      }
    },
    "publishFeedsRequest": {
      "x-format": "Message",
      "type": "object",
      "required": [
        "messages"
      ],
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/publishFeed"
          }
        }
      }
    },
    "unpublishFeedsRequest": {
      "x-format": "Message",
      "type": "object",
      "required": [
        "messages"
      ],
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/unpublishFeed"
          }
        }
      }
    },
    "completeFeedPublicationRequest": {
      "x-format": "Message",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "errorId": {
          "type": "string"
        }
      }
    },
    "checkFeedPublicationStatusResponse": {
      "x-format": "Message",
      "description": "Publication Status Response",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/feedPublicationStatus"
        },
        "globalReportings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportingItem"
          }
        }
      }
    },
    "getFeedPublicationReportingResponse": {
      "x-format": "Message",
      "description": "Publication Reporting Response",
      "type": "object",
      "properties": {
        "feedReportings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feedReporting"
          }
        }
      }
    },
    "feedType": {
      "type": "string"
    },
    "publishFeed": {
      "type": "object",
      "required": [
        "sku",
        "properties"
      ],
      "properties": {
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "properties": {
          "description": "where key is the feed property name declared in the BeezUP configuration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metadataProperty"
          }
        },
        "children": {
          "type": "array",
          "description": "Contains item variations",
          "items": {
            "$ref": "#/definitions/publishFeedChild"
          }
        }
      }
    },
    "unpublishFeed": {
      "type": "object",
      "required": [
        "sku",
        "properties"
      ],
      "description": "Item variation",
      "properties": {
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "properties": {
          "description": "where key is the feed property name declared in the BeezUP configuration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metadataProperty"
          }
        }
      }
    },
    "feedPublicationStatus": {
      "type": "string",
      "enum": [
        "inProgress",
        "done",
        "failed",
        "notStarted"
      ],
      "default": "notStarted"
    },
    "reportingItem": {
      "type": "object",
      "required": [
        "reportingType",
        "code",
        "message"
      ],
      "properties": {
        "reportingType": {
          "$ref": "#/definitions/reportingType"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "feedReporting": {
      "type": "object",
      "required": [
        "sku",
        "reportings"
      ],
      "properties": {
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "reportings": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/reportingItem"
          }
        }
      }
    },
    "sku": {
      "type": "string",
      "description": "The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku",
      "maxLength": 50
    },
    "metadataProperty": {
      "type": "object",
      "description": "The meta data of a property",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "The property name"
        },
        "value": {
          "type": "string",
          "description": "The property value"
        }
      }
    },
    "publishFeedChild": {
      "type": "object",
      "required": [
        "sku",
        "properties"
      ],
      "description": "Item variation",
      "properties": {
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "properties": {
          "description": "where key is the feed property name declared in the BeezUP configuration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metadataProperty"
          }
        }
      }
    },
    "reportingType": {
      "type": "string",
      "enum": [
        "error",
        "warning"
      ],
      "default": "error"
    },
    "getOrderListResponse": {
      "x-format": "Message",
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "nextPageContinuationToken": {
          "$ref": "#/definitions/paginationContinuationToken"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrder"
          }
        }
      }
    },
    "getOrderResponse": {
      "x-format": "Message",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/marketplaceOrder"
        }
      ]
    },
    "pushOrderChangeMessageRequest": {
      "x-format": "Message",
      "type": "object",
      "required": [
        "beezUPOrderChangeType",
        "marketplaceOrderItems"
      ],
      "properties": {
        "beezUPOrderChangeType": {
          "$ref": "#/definitions/beezUPOrderChangeType"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metadataProperty"
          }
        },
        "marketplaceOrderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrderItem"
          }
        }
      }
    },
    "orderChangeStatusResponse": {
      "x-format": "Message",
      "type": "object",
      "required": [
        "beezUPOrderChangeStatus"
      ],
      "properties": {
        "marketplaceOrderChangeStatus": {
          "$ref": "#/definitions/marketplaceOrderChangeStatus"
        },
        "beezUPOrderChangeStatus": {
          "$ref": "#/definitions/beezUPOrderChangeStatus"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "paginationContinuationToken": {
      "type": "string",
      "description": "Just a string value that will help to get the next page"
    },
    "marketplaceOrder": {
      "type": "object",
      "required": [
        "marketplaceOrderId",
        "orderPurchaseUtcDate",
        "marketplaceOrderStatus",
        "marketplaceOrderLastModificationUtcDate",
        "marketplaceOrderETag",
        "properties",
        "items"
      ],
      "properties": {
        "marketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        },
        "orderPurchaseUtcDate": {
          "$ref": "#/definitions/orderPurchaseUtcDate"
        },
        "marketplaceOrderStatus": {
          "$ref": "#/definitions/marketplaceOrderStatus"
        },
        "marketplaceOrderLastModificationUtcDate": {
          "$ref": "#/definitions/marketplaceOrderLastModificationUtcDate"
        },
        "marketplaceOrderETag": {
          "$ref": "#/definitions/marketplaceOrderETag"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metadataProperty"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrderItem"
          }
        }
      }
    },
    "beezUPOrderChangeType": {
      "type": "string",
      "description": "The order change type known by BeezUP.",
      "enum": [
        "AcceptOrder",
        "RefuseOrder",
        "ShipOrder",
        "CancelOrder",
        "RefundOrder",
        "RestockOrder",
        "PickUpOrder",
        "InvoiceOrder"
      ]
    },
    "marketplaceOrderItem": {
      "type": "object",
      "required": [
        "properties"
      ],
      "properties": {
        "marketplaceOrderItemId": {
          "$ref": "#/definitions/marketplaceOrderItemId"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metadataProperty"
          }
        }
      }
    },
    "marketplaceOrderChangeStatus": {
      "type": "string"
    },
    "beezUPOrderChangeStatus": {
      "type": "string",
      "enum": [
        "notStarted",
        "inProgress",
        "success",
        "failed"
      ],
      "default": "notStarted"
    },
    "marketplaceOrderId": {
      "description": "The marketplace order identifier",
      "type": "string"
    },
    "orderPurchaseUtcDate": {
      "type": "string",
      "format": "date-time",
      "description": "The purchase date of the order"
    },
    "marketplaceOrderStatus": {
      "type": "string",
      "description": "The marketplace order status"
    },
    "marketplaceOrderLastModificationUtcDate": {
      "type": "string",
      "format": "date-time",
      "description": "The modification date done by the marketplace"
    },
    "marketplaceOrderETag": {
      "type": "string",
      "description": "The ETAG based on the content of the marketplace order. It could based on the marketplace last modification date or the whole content of the order."
    },
    "marketplaceOrderItemId": {
      "type": "string"
    },
    "getDiscussionResponse": {
      "type": "object",
      "required": [
        "channelCreationUtcDate"
      ],
      "properties": {
        "channelDiscussionId": {
          "$ref": "#/definitions/channelDiscussionId"
        },
        "subject": {
          "$ref": "#/definitions/discussionSubject"
        },
        "status": {
          "$ref": "#/definitions/discussionStatus"
        },
        "type": {
          "$ref": "#/definitions/discussionType"
        },
        "subType": {
          "$ref": "#/definitions/discussionSubType"
        },
        "isTest": {
          "type": "boolean"
        },
        "relatedEntities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/getDiscussionEntityResponse"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/getDiscussionMessageResponse"
          }
        },
        "channelCreationUtcDate": {
          "type": "string",
          "format": "date-time"
        },
        "additionalDatas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/additionalData"
          }
        }
      }
    },
    "sendDiscussionMessageRequest": {
      "type": "object",
      "required": [
        "channelDiscussionId",
        "discussionId",
        "discussionMessageId",
        "body",
        "subject",
        "from",
        "to"
      ],
      "properties": {
        "channelDiscussionId": {
          "$ref": "#/definitions/channelDiscussionId"
        },
        "discussionId": {
          "$ref": "#/definitions/discussionId"
        },
        "discussionMessageId": {
          "$ref": "#/definitions/discussionMessageId"
        },
        "body": {
          "$ref": "#/definitions/discussionMessageBody"
        },
        "subject": {
          "$ref": "#/definitions/discussionSubject"
        },
        "from": {
          "$ref": "#/definitions/createDiscussionMessageParticipantRequest"
        },
        "to": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/createDiscussionMessageParticipantRequest"
          }
        },
        "isTest": {
          "type": "boolean",
          "description": "If true, the message will be sent to the channel test environment or it will be only kept inside the system not sent to anyone"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createDiscussionMessageAttachmentRequest"
          }
        },
        "replyToChannelDiscussionMessageId": {
          "$ref": "#/definitions/channelDiscussionMessageId"
        },
        "additionalInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "createDiscussionMessageResponse": {
      "type": "object",
      "required": [
        "discussionId",
        "discussionMessageId",
        "success"
      ],
      "properties": {
        "discussionId": {
          "$ref": "#/definitions/discussionId"
        },
        "discussionMessageId": {
          "$ref": "#/definitions/discussionMessageId"
        },
        "channelDiscussionId": {
          "$ref": "#/definitions/channelDiscussionId"
        },
        "channelDiscussionMessageId": {
          "$ref": "#/definitions/channelDiscussionMessageId"
        },
        "success": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "createDiscussionRequest": {
      "type": "object",
      "required": [
        "id",
        "subject"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/discussionId"
        },
        "subject": {
          "$ref": "#/definitions/discussionSubject"
        },
        "status": {
          "$ref": "#/definitions/discussionStatus"
        },
        "type": {
          "$ref": "#/definitions/discussionType"
        },
        "subType": {
          "$ref": "#/definitions/discussionSubType"
        },
        "isTest": {
          "type": "boolean"
        },
        "relatedEntities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createDiscussionEntityRequest"
          }
        },
        "message": {
          "$ref": "#/definitions/createDiscussionMessageRequest"
        }
      }
    },
    "createDiscussionResponse": {
      "type": "object",
      "required": [
        "discussionId",
        "discussionMessageId",
        "success"
      ],
      "properties": {
        "discussionId": {
          "$ref": "#/definitions/discussionId"
        },
        "discussionMessageId": {
          "$ref": "#/definitions/discussionMessageId"
        },
        "channelDiscussionId": {
          "$ref": "#/definitions/channelDiscussionId"
        },
        "channelDiscussionMessageId": {
          "$ref": "#/definitions/channelDiscussionMessageId"
        },
        "success": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "accountLastSynchronization": {
      "type": "object",
      "required": [
        "channelCode",
        "merchantId"
      ],
      "properties": {
        "channelCode": {
          "$ref": "#/definitions/conversationChannelCode"
        },
        "merchantId": {
          "$ref": "#/definitions/merchantId"
        },
        "lastSynchronizationUtcDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "channelCodeMerchantId": {
      "type": "object",
      "required": [
        "channelCode",
        "merchantId"
      ],
      "properties": {
        "channelCode": {
          "$ref": "#/definitions/conversationChannelCode"
        },
        "merchantId": {
          "$ref": "#/definitions/merchantId"
        }
      }
    },
    "channelDiscussionId": {
      "description": "The channel discussion identifier",
      "type": "string",
      "maxLength": 50,
      "x-maxLength": "50"
    },
    "discussionSubject": {
      "type": "string",
      "description": "The subject of the discussion",
      "maxLength": 500,
      "x-maxLength": "500",
      "x-cultureSensitive": "true"
    },
    "discussionStatus": {
      "type": "string",
      "description": "The status of the discussion",
      "enum": [
        "UNKNOWN",
        "OPEN",
        "PENDING",
        "SOLVED",
        "CLOSED"
      ]
    },
    "discussionType": {
      "type": "string",
      "description": "The type of the discussion",
      "enum": [
        "ORDER",
        "PRODUCT",
        "OTHER"
      ]
    },
    "discussionSubType": {
      "type": "string",
      "enum": [
        "ORDERADDRESS",
        "ORDERCANCELLATION",
        "ORDERDELAY",
        "ORDERINCOMPLETE",
        "ORDERINVOICE",
        "ORDERNOTRECEIVED",
        "ORDERPAYMENT",
        "ORDERPRODUCTDEFECT",
        "ORDERPRODUCTWRONG",
        "ORDERREFUND",
        "ORDERRETURN",
        "ORDERNOTIFICATION",
        "ORDERACKNOWLEDGEMENT",
        "ORDEROTHER",
        "PRODUCTINVENTORY",
        "PRODUCTCHARACTERISTICS",
        "PRODUCTOTHER",
        "OTHER",
        "UNKNOWN"
      ]
    },
    "getDiscussionEntityResponse": {
      "type": "object",
      "required": [
        "type",
        "id"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/discussionEntityType"
        },
        "id": {
          "$ref": "#/definitions/discussionEntityId"
        },
        "name": {
          "$ref": "#/definitions/discussionEntityName"
        }
      }
    },
    "getDiscussionMessageResponse": {
      "type": "object",
      "properties": {
        "channelDiscussionMessageId": {
          "$ref": "#/definitions/channelDiscussionMessageId"
        },
        "body": {
          "$ref": "#/definitions/discussionMessageBody"
        },
        "from": {
          "$ref": "#/definitions/getDiscussionMessageParticipantResponse"
        },
        "to": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/getDiscussionMessageParticipantResponse"
          }
        },
        "isTest": {
          "type": "boolean",
          "description": "If true, the message will be sent to the channel test environment or it will be only kept inside the system not sent to anyone"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/getDiscussionMessageAttachmentResponse"
          }
        },
        "channelCreationUtcDate": {
          "type": "string",
          "format": "date-time"
        },
        "additionalDatas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/additionalData"
          }
        }
      }
    },
    "additionalData": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "discussionId": {
      "type": "string",
      "description": "The discussion identifier",
      "format": "Guid"
    },
    "discussionMessageId": {
      "type": "string",
      "format": "guid"
    },
    "discussionMessageBody": {
      "type": "string",
      "maxLength": 49152,
      "x-maxLength": "49152",
      "x-minValueLength": "0"
    },
    "createDiscussionMessageParticipantRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/discussionParticipantType"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "phoneNumber": {
          "$ref": "#/definitions/phoneNumber"
        },
        "displayName": {
          "$ref": "#/definitions/discussionParticipantDisplayName"
        },
        "channelParticipantId": {
          "$ref": "#/definitions/channelParticipantId"
        }
      }
    },
    "createDiscussionMessageAttachmentRequest": {
      "type": "object",
      "required": [
        "name",
        "url",
        "contentType",
        "size"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/fileName"
        },
        "url": {
          "$ref": "#/definitions/httpUrl"
        },
        "contentType": {
          "$ref": "#/definitions/fileContentType"
        },
        "size": {
          "$ref": "#/definitions/discussionMessageAttachmentFileSize"
        }
      }
    },
    "channelDiscussionMessageId": {
      "type": "string",
      "maxLength": 200,
      "x-maxLength": "200"
    },
    "createDiscussionEntityRequest": {
      "description": "Entity related to the discussion",
      "type": "object",
      "required": [
        "type",
        "id"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/discussionEntityType"
        },
        "id": {
          "$ref": "#/definitions/discussionEntityId"
        },
        "name": {
          "$ref": "#/definitions/discussionEntityName"
        }
      }
    },
    "createDiscussionMessageRequest": {
      "type": "object",
      "required": [
        "discussionId",
        "discussionMessageId",
        "body",
        "from",
        "to"
      ],
      "properties": {
        "discussionId": {
          "$ref": "#/definitions/discussionId"
        },
        "discussionMessageId": {
          "$ref": "#/definitions/discussionMessageId"
        },
        "body": {
          "$ref": "#/definitions/discussionMessageBody"
        },
        "from": {
          "$ref": "#/definitions/createDiscussionMessageParticipantRequest"
        },
        "to": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/createDiscussionMessageParticipantRequest"
          }
        },
        "isTest": {
          "type": "boolean",
          "description": "If true, the message will be sent to the channel test environment or it will be only kept inside the system not sent to anyone"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createDiscussionMessageAttachmentRequest"
          }
        }
      }
    },
    "conversationChannelCode": {
      "description": "The conversation channel code",
      "type": "string",
      "pattern": "^([A-Z0-9]){2,26}$",
      "x-pattern": "^([A-Z0-9]){2,26}$",
      "x-maxLength": "26",
      "x-minLength": "2"
    },
    "merchantId": {
      "type": "string",
      "description": "The merchant identifier",
      "pattern": "(^([0-9]{1,20})$)|(^([A-Z0-9]){5}$)",
      "x-pattern": "(^([0-9]{1,20})$)|(^([A-Z0-9]){5}$)",
      "x-maxLength": "20",
      "x-minLength": "1"
    },
    "discussionEntityType": {
      "description": "The discussion entity type",
      "type": "string",
      "enum": [
        "MERCHANTORDERID",
        "CHANNELORDERID",
        "MERCHANTDISCUSSIONID",
        "CHANNELDISCUSSIONID",
        "CHANNELPRODUCTGTIN",
        "CHANNELPRODUCTSKU",
        "CHANNELPRODUCTID",
        "CHANNELPRODUCTMPN",
        "CHANNELLINK",
        "OTHER"
      ]
    },
    "discussionEntityId": {
      "description": "The identifier of the entity related to the discussion",
      "type": "string",
      "maxLength": 100,
      "x-maxLength": "100"
    },
    "discussionEntityName": {
      "type": "string",
      "description": "Discussion entity name",
      "maxLength": 250,
      "x-maxLength": "250"
    },
    "getDiscussionMessageParticipantResponse": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/discussionParticipantType"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "phoneNumber": {
          "$ref": "#/definitions/phoneNumber"
        },
        "displayName": {
          "$ref": "#/definitions/discussionParticipantDisplayName"
        },
        "channelParticipantId": {
          "$ref": "#/definitions/channelParticipantId"
        }
      }
    },
    "getDiscussionMessageAttachmentResponse": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/fileName"
        },
        "url": {
          "$ref": "#/definitions/httpUrl"
        },
        "contentType": {
          "$ref": "#/definitions/fileContentType"
        },
        "size": {
          "$ref": "#/definitions/discussionMessageAttachmentFileSize"
        }
      }
    },
    "discussionParticipantType": {
      "type": "string",
      "enum": [
        "OPERATOR",
        "CHANNELOPERATOR",
        "MERCHANT",
        "BUYER"
      ]
    },
    "email": {
      "x-exclude": true,
      "description": "The email",
      "type": "string",
      "format": "email",
      "pattern": "^(.+)@(.+)$",
      "x-pattern": "^(.+)@(.+)$",
      "example": "paulsimon@mysupercompany.com",
      "x-maxLength": "320",
      "x-minLength": "3"
    },
    "phoneNumber": {
      "type": "string",
      "maxLength": 50,
      "x-maxLength": "50"
    },
    "discussionParticipantDisplayName": {
      "type": "string",
      "maxLength": 250,
      "x-maxLength": "250"
    },
    "channelParticipantId": {
      "type": "string",
      "maxLength": 100,
      "x-maxLength": "100"
    },
    "fileName": {
      "type": "string",
      "maxLength": 250,
      "x-maxLength": "250"
    },
    "httpUrl": {
      "x-exclude": true,
      "description": "The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>",
      "type": "string",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "x-pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "http://www.mydomain.com",
      "x-maxLength": "500",
      "x-cultureSensitive": "true"
    },
    "fileContentType": {
      "type": "string",
      "maxLength": 100,
      "x-maxLength": "100"
    },
    "discussionMessageAttachmentFileSize": {
      "type": "integer",
      "x-format": "long",
      "minimum": 0,
      "x-minimum": "0"
    },
    "errorCode": {
      "x-exclude": true,
      "type": "string",
      "description": "the error code. The error code can be a pattern containing the argument's name",
      "example": "CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)"
    },
    "cultureName": {
      "x-exclude": true,
      "type": "string",
      "description": "If the error is translated, the culture name will be indicated",
      "example": "en"
    },
    "userErrorMessageArguments": {
      "x-exclude": true,
      "type": "object",
      "description": "a dictionary string/object",
      "additionalProperties": {
        "type": "object"
      }
    }
  },
  "parameters": {
    "marketplaceBusinessCodeParameter": {
      "name": "marketplaceBusinessCode",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "MarketplaceBusinessCode"
    },
    "accountIdParameter": {
      "name": "accountId",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "AccountId"
    },
    "beezUPRequestIdHeaderParameter": {
      "name": "x-BeezUP-RequestId",
      "in": "header",
      "type": "string",
      "format": "RequestId",
      "required": true,
      "description": "Indicates to the server the BeezUP request id related to this call. All traces must use this id to be able to follow it."
    },
    "beezUPCorrelationIdHeaderParameter": {
      "name": "x-BeezUP-CorrelationId",
      "in": "header",
      "type": "string",
      "format": "CorrelationId",
      "required": true,
      "description": "Indicates to the server the BeezUP correlation id related to this call. All traces must use this id to be able to follow it."
    },
    "credentialParameter": {
      "name": "x-BeezUP-Credential",
      "in": "header",
      "required": true,
      "x-base64": "true",
      "description": "It's the merchant configuration related to the marketplace, serialiazed in json in base64.",
      "type": "string",
      "x-base64JsonType": "Dictionary<string,string>"
    },
    "publicationIdParameter": {
      "name": "publicationId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "PublicationId"
    },
    "contentEncodingRequiredParameter": {
      "name": "Content-Encoding",
      "description": "The content of the body is compressed to reduce traffic size.",
      "in": "header",
      "required": false,
      "type": "string",
      "x-example": "gzip"
    },
    "acceptEncodingRequiredParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": true,
      "type": "string",
      "x-example": "gzip"
    },
    "paginationContinuationTokenQueryStringParameter": {
      "name": "paginationContinuationToken",
      "description": "The pagination continuation token you want to get next page.",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "PaginationContinuationToken"
    },
    "marketplaceOrderIdParameter": {
      "name": "marketplaceOrderId",
      "description": "The marketplace order identifier",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "MarketplaceOrderId",
      "x-example": "M1234X10"
    },
    "ifNoneMatchRequiredParameter": {
      "name": "If-None-Match",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\\nIf the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "orderChangeIdParameter": {
      "name": "orderChangeId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "OrderChangeId",
      "description": "Order change identifier which is equivalent to the correlationId"
    },
    "channelConfigHeaderParameter": {
      "name": "X-CONV-CHANNEL-CONFIG",
      "in": "header",
      "required": true,
      "x-base64": "true",
      "description": "It's the channel configuration, serialiazed in json in base64.",
      "type": "string",
      "x-base64JsonType": "Dictionary<string,string>"
    },
    "channelAccountConfigHeaderParameter": {
      "name": "X-CONV-CHANNELACCOUNT-CONFIG",
      "in": "header",
      "required": true,
      "x-base64": "true",
      "description": "It's the merchant configuration related to the channel, serialiazed in json in base64.",
      "type": "string",
      "x-base64JsonType": "Dictionary<string,string>"
    },
    "conversationChannelCodePathParameter": {
      "name": "conversationChannelCode",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "ConversationChannelCode"
    },
    "merchantIdPathParameter": {
      "name": "merchantId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "MerchantId"
    },
    "channelDiscussionIdPathParameter": {
      "name": "channelDiscussionId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "ChannelDiscussionId"
    }
  },
  "responses": {
    "200_HealthCheck": {
      "description": "The health check of the API",
      "headers": {
        "x-MKP-ADPT-ExchangeMessages": {
          "type": "string",
          "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
          "format": "ExchangedMessages"
        },
        "x-BeezUP-AdditionalCredentials": {
          "type": "string",
          "description": "The additional credentials from the marketplace to save in BeezUP. \nThe header value is a BeezUPAdditionalCredential[] type serialized in Json encoded in base64.\nEach BeezUPAdditionalCredential is comprised of a Key and a Value:     \nKey is the name of the property in BeezUP system (the nomenclature is important).\nValue is the provided value from the marketplace implementation.\nExample of expected format: [{key:\"key\",value:\"value\"},{key:\"key2\",value:\"value2\"}]\n"
        }
      },
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/healthCheckDomain"
        }
      }
    },
    "400_MBC_Invalid": {
      "description": "The marketplace business code is invalid",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "403_Invalid_Merchant_Credentials": {
      "description": "The merchant credentials are invalid",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "GeneralError": {
      "description": "Occurs when something goes wrong",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "404_BeezUP_TraceId_NotFound": {
      "description": "BeezUP Trace Id is not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "409_Not_Yet_Available": {
      "description": "Resource not yet available",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "404_Publication_NotFound": {
      "description": "The combination of MarketplaceBusinessCode, AccountId and publication id is not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "409_Publication_Already_Completed": {
      "description": "The publication id is already completed",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "409_Publication_Already_Exists": {
      "description": "The publication id  already exists",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "400_MBC_Or_Request_Invalid": {
      "description": "The marketplace business code is invalid or the request is invalid",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "503_Marketplace_Down": {
      "description": "The marketplace has an invalid response",
      "headers": {
        "x-MKP-ADPT-ExchangeMessages": {
          "type": "string",
          "description": "The exchange messages with the marketplace. Exchange Messages type serialized in Json encoded in base64.",
          "format": "ExchangedMessages"
        }
      },
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "504_Gateway_Timeout": {
      "description": "Timeout on the api server",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "404_OrderChangeId_Not_Found": {
      "description": "Order change not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "404_Order_Not_Found": {
      "description": "Order not found",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "304_NotModified": {
      "description": "The ETag sent in the http header If-None-Match did not change. So you are up to date !",
      "headers": {
        "Last-Modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification UTC date of the resource\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
        },
        "ETag": {
          "type": "string",
          "description": "ETag value to identify the current version of the resource\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    },
    "429_TooManyRequests": {
      "description": "Occurs when the server received too many requests",
      "headers": {
        "Retry-After": {
          "description": "indicates the remaining time until the server will accept new requests. For more details, please follow this link https://tools.ietf.org/html/rfc7231#section-7.1.3",
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find the documentation for BeezUP's API here",
    "url": "https://api-docs.beezup.com/"
  },
  "x-tagGroups": [
    {
      "name": "Marketplace Gateway API - Platform",
      "tags": [
        "Marketplace Gateway API - Platform - Platform"
      ]
    },
    {
      "name": "Marketplace Gateway API - Feeds",
      "tags": [
        "Marketplace Gateway API - Feeds - Publication"
      ]
    },
    {
      "name": "Marketplace Gateway API - Orders",
      "tags": [
        "Marketplace Gateway API - Orders - Order Management"
      ]
    },
    {
      "name": "Conversation ADPT RestAPI",
      "tags": [
        "Conversation ADPT RestAPI - Conversation"
      ]
    }
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  }
}